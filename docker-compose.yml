# docker-compose.yml
version: "3.8"

services:
  redis:
    hostname: redis
    container_name: tb_redis
    image: technoboggle/redis-alpine:7.0.12-3.18.2
    volumes:
      - conf_redis:/etc/redis
      - data_redis:/data
      - log_redis:/var/log/redis
    deploy:
      resources:
        limits:
          memory: 100M
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_PASSWORD=password123
      - REDIS_PORT_NUMBER=6579
    entrypoint: docker-entrypoint.sh
    #command: /opt/bitnami/scripts/redis/run.sh --maxmemory 100mb
    command: "redis-server /etc/redis/redis.conf"
    ports:
      - '6579:6579'
    networks:
      backend:

  mysql:
    hostname: mysql
    container_name: tb_mysql
    image: technoboggle/mysql-alpine:10.11.4-r0-3.18.2
    depends_on:
      - redis
    environment:
      - MYSQL_ROOT_PASSWORD="V=h7-pcXB_3VE4%ux4#6"
      - MYSQL_DATABASE=otrack
      - MYSQL_USER=otrack
      - MYSQL_PASSWORD='4A=IM-S8Kv7p*z+4#VR3'
    ports:
      - "3306:3306"
    networks:
      backend:
      frontend:
    volumes:
      - data_mysql:/var/lib/mysql

  php-82:
    hostname: php-82
    container_name: tb_php
    image: technoboggle/php-fpm-alpine:8.2.8-3.18
    depends_on:
      - redis
      - mysql
    links:
      - redis
      - mysql
    ports:
      - "9000:9000"
    networks:
      dev_stack:
    volumes:
      - src_base:/var/www/html
      - log_base:/var/log
    working_dir: /var/www/html
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      XDEBUG_MODE: develop,debug
      XDEBUG_CONFIG: clinet_host=host.docker.internal

  nginx:
    hostname: nginx
    container_name: tb_nginx
    image: technoboggle/nginx_mods-alpine:1.25.1-3.17.1
    depends_on:
      - mysql
    links:
      - php-82
      - redis
    ports:
      - "80:80"
      - "443:443"
    volumes:
      #- ./conf/nginx/base.nginx.conf:/etc/nginx/conf.d/default.conf
      - ./conf/nginx/templates:/etc/nginx/templates
      - ./conf/nginx/dhparam.pem:/etc/nginx/ssl/dhparam4096.pem
      - errors_base:/var/www/errors
      - log_base:/var/log
      - src_base:/var/www/html
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      frontend:
        aliases:
          - otrack.city-uk.com
          - otrack
          - localhost
      backend:
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - NGINX_ENDSUBST_OUTPUTDIR=/etc/nginc/conf.deamon
      - NGINX_PORT=80
      - NGINX_SSL_PORT=443
      - NGINX_HOST=technoboggle.net
      - NGINX_HOST0=www.technoboggle.net
      - NGINX_DOMAIN=technoboggle.net

  certbot:
    image: certbot/certbot
    container_name: tb_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email edward.finlayson@talktalk.net -d technoboggle.net --non-interactive --agree-tos
    # The parameters are used to automate the process without you needing to
    # manually enter the data on every container run.
    #
    # certonly: only generate certificate without installing
    #
    # webroot: use our own webserver in this case NGINX
    # w: root directory of webserver for the challenges
    # force-renewal: on repeated run renew certificates
    # email: your email for notifcations
    # d: domain for the certificate (you can enter
    #   -d {domain} multiple times for different domains)
    # agree-tos: agree the terms of service automatically
    #   (dont set it, if you want to read and understand them first)

  restarter:
    hostname: restarter
    container_name: tb_restarter
    image: docker:cli
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
    command: ["/bin/sh", "-c", "while true; do sleep 5184000 ; docker restart certbot; done"]
    restart: unless-stopped
    # In the command statement above the figuer of 5184000 represents the number
    # of seconds in the recommended 60 day certifiace refersh interval at LetsEncrypt

  composer:
    container_name: tb_composer
    image: composer:latest
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    networks:
      frontend:
      backend:

  # This one is included for completeness ONLY
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: tb_pma
    depends_on:
      - mysql
    links:
      - mysql
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=33006
      - PMA_ARBITRARY=1
    restart: always
    ports:
      - 8085:80
    networks:
      frontend:
      backend:

networks:
  dev_stack:
  frontend:
  backend:

volumes:
  # Putting an NFS example here as a memory aid: DO NOT ENABLE
  #nfs-conf:
  #  driver: local
  #  driver_opts:
  #    o: addr=10.10.10.2,rw,nolock,soft.resvport.nfsver=4
  #    type: nfs
  #    device: ":/nfx/some-path/to_be_exposed/"

  src_base:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/src"
      o: bind

  log_base:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/log"
      o: bind

  errors_base:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/errors"
      o: bind

  conf_base:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/conf"
      o: bind

  conf_redis:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/conf/redis"
      o: bind

  data_base:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/data"
      #o: bind

  data_redis:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/data/redis"
      o: bind

  data_mysql:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/data/mysql"
      o: bind

  log_redis:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/log/redis"
      o: bind
